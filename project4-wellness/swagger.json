{
  "swagger": "2.0",
  "info": {
    "title": "Mood Journal API",
    "description": "API to create and track mood journal entries including sleep, hydration, and exercise.",
    "contact": {
      "name": "Greice Moreira teste",
      "email": "deandradegreice@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "cse341-gm.onrender.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "cookieAuth": {
      "type": "apiKey",
      "in": "cookie",
      "name": "connect.sid"
    }
  },
  "paths": {
    "/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/github": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/github/callback": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user account",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "description": "User data (email, password, name, age, avatar)",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created user object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request (validation or save error)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user details by ID",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "User not identified"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "user",
            "in": "body",
            "description": "Updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "No user found or bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user (requires password)",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password to confirm account deletion",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "password": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "password"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Incorrect password"
          },
          "404": {
            "description": "No user found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/social/": {
      "get": {
        "tags": [
          "SocialEntries"
        ],
        "summary": "Get all social entries",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of social entries",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/SocialEntry"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SocialEntries"
        ],
        "summary": "Create a new social entry",
        "description": "",
        "parameters": [
          {
            "name": "entry",
            "in": "body",
            "description": "Social entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SocialEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created social entry",
            "schema": {
              "$ref": "#/definitions/SocialEntry"
            }
          },
          "400": {
            "description": "Validation or creation error"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/social/{date}": {
      "get": {
        "tags": [
          "SocialEntries"
        ],
        "summary": "Get social entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "Social entry object",
            "schema": {
              "$ref": "#/definitions/SocialEntry"
            }
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "SocialEntries"
        ],
        "summary": "Update social entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry to update (YYYY-MM-DD)"
          },
          {
            "name": "entry",
            "in": "body",
            "description": "Updated social entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SocialEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated social entry",
            "schema": {
              "$ref": "#/definitions/SocialEntry"
            }
          },
          "400": {
            "description": "Validation or update error"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "SocialEntries"
        ],
        "summary": "Delete social entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Entry date in ISO format (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "userId123"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry deleted successfully"
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          }
        }
      }
    },
    "/spiritual/": {
      "get": {
        "tags": [
          "SpiritualEntries"
        ],
        "summary": "Get all spiritual entries",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "List of spiritual entries",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/SpiritualEntry"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Missing or invalid user ID"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "SpiritualEntries"
        ],
        "summary": "Create a new spiritual entry",
        "description": "",
        "parameters": [
          {
            "name": "entry",
            "in": "body",
            "description": "Spiritual entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpiritualEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created spiritual entry",
            "schema": {
              "$ref": "#/definitions/SpiritualEntry"
            }
          },
          "400": {
            "description": "Validation or creation error"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/spiritual/{date}": {
      "get": {
        "tags": [
          "SpiritualEntries"
        ],
        "summary": "Get spiritual entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "Spiritual entry object",
            "schema": {
              "$ref": "#/definitions/SpiritualEntry"
            }
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "SpiritualEntries"
        ],
        "summary": "Update spiritual entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry to update (YYYY-MM-DD)"
          },
          {
            "name": "entry",
            "in": "body",
            "description": "Updated spiritual entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpiritualEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated spiritual entry",
            "schema": {
              "$ref": "#/definitions/SpiritualEntry"
            }
          },
          "400": {
            "description": "Validation or update error"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "SpiritualEntries"
        ],
        "summary": "Delete spiritual entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Entry date in ISO format (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "userId123"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry deleted successfully"
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          }
        }
      }
    },
    "/physical/": {
      "get": {
        "tags": [
          "PhysicalEntries"
        ],
        "summary": "Get all physical entries for a user",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "List of physical entries",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/PhysicalEntry"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Missing or invalid user ID"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "PhysicalEntries"
        ],
        "summary": "Create a new physical entry",
        "description": "",
        "parameters": [
          {
            "name": "entry",
            "in": "body",
            "description": "Physical entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created physical entry",
            "schema": {
              "$ref": "#/definitions/PhysicalEntry"
            }
          },
          "400": {
            "description": "Validation or creation error"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/physical/{date}": {
      "get": {
        "tags": [
          "PhysicalEntries"
        ],
        "summary": "Get physical entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "Physical entry object",
            "schema": {
              "$ref": "#/definitions/PhysicalEntry"
            }
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "PhysicalEntries"
        ],
        "summary": "Update physical entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Entry date (YYYY-MM-DD)"
          },
          {
            "name": "entry",
            "in": "body",
            "description": "Updated physical entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated physical entry",
            "schema": {
              "$ref": "#/definitions/PhysicalEntry"
            }
          },
          "400": {
            "description": "Validation or update error"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalEntries"
        ],
        "summary": "Delete physical entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Entry date (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "userId123"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry successfully deleted"
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/intellectual/": {
      "get": {
        "tags": [
          "IntellectualEntries"
        ],
        "summary": "Get all intellectual entries for a user",
        "description": "",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "List of intellectual entries",
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          },
          "400": {
            "description": "Missing or invalid user ID"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "IntellectualEntries"
        ],
        "summary": "Create a new intellectual entry",
        "description": "",
        "parameters": [
          {
            "name": "entry",
            "in": "body",
            "description": "New intellectual entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created intellectual entry",
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          },
          "400": {
            "description": "Validation or creation error"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/intellectual/{date}": {
      "get": {
        "tags": [
          "IntellectualEntries"
        ],
        "summary": "Get intellectual entry by date for a user",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "665cf1c01d13c63a9e8f601d"
          }
        ],
        "responses": {
          "200": {
            "description": "Single intellectual entry object",
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "IntellectualEntries"
        ],
        "summary": "Update intellectual entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Date of the entry to update (YYYY-MM-DD)"
          },
          {
            "name": "entry",
            "in": "body",
            "description": "Updated intellectual entry data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated intellectual entry",
            "schema": {
              "$ref": "#/definitions/IntellectualEntry"
            }
          },
          "400": {
            "description": "Validation or update error"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "IntellectualEntries"
        ],
        "summary": "Delete intellectual entry by date",
        "description": "",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Entry date in ISO format (YYYY-MM-DD)"
          },
          {
            "name": "user",
            "in": "query",
            "description": "User ID",
            "required": true,
            "type": "string",
            "example": "userId123"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry successfully deleted"
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123456789"
        },
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "example": "strongpassword123"
        },
        "name": {
          "type": "string",
          "example": "Jane Doe"
        },
        "age": {
          "type": "number",
          "example": 30
        },
        "avatar": {
          "type": "number",
          "example": 1
        }
      }
    },
    "SocialEntry": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "6849bacf9069708e328de0de"
        },
        "date": {
          "type": "string",
          "example": "2025-06-07"
        },
        "interactionsCount": {
          "type": "number",
          "example": 3
        },
        "socialActivities": {
          "type": "array",
          "example": [
            "Lunch with friend",
            "Call with family"
          ],
          "items": {
            "type": "string"
          }
        },
        "interactionType": {
          "type": "array",
          "example": [
            "In-person",
            "Online"
          ],
          "items": {
            "type": "string"
          }
        },
        "interactionQuality": {
          "type": "string",
          "example": "Good"
        },
        "energyAfterSocializing": {
          "type": "string",
          "example": "Refreshed"
        },
        "socialMood": {
          "type": "string",
          "example": "Connected"
        }
      }
    },
    "PhysicalEntry": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "6849bacf9069708e328de0de"
        },
        "date": {
          "type": "string",
          "example": "2025-06-07"
        },
        "mood": {
          "type": "number",
          "example": 8
        },
        "exercise": {
          "type": "boolean",
          "example": true
        },
        "water": {
          "type": "number",
          "example": 2
        },
        "sleepHours": {
          "type": "number",
          "example": 7.5
        },
        "healthyEating": {
          "type": "boolean",
          "example": true
        },
        "homeCare": {
          "type": "string",
          "example": "Cleaned the kitchen and folded laundry"
        }
      }
    },
    "SpiritualEntry": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "6849bacf9069708e328de0de"
        },
        "date": {
          "type": "string",
          "example": "2025-06-07"
        },
        "prayerTime": {
          "type": "number",
          "example": 2
        },
        "scriptureStudyMinutes": {
          "type": "number",
          "example": 30
        },
        "comeFollowMeStudy": {
          "type": "boolean",
          "example": true
        },
        "sacramentMeeting": {
          "type": "boolean",
          "example": true
        },
        "ministering": {
          "type": "boolean",
          "example": false
        },
        "templeAttendance": {
          "type": "boolean",
          "example": false
        },
        "spiritualFeeling": {
          "type": "string",
          "example": "Grateful"
        },
        "journal": {
          "type": "string",
          "example": "Reflected on faith during study"
        }
      }
    },
    "IntellectualEntry": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "6849bacf9069708e328de0de"
        },
        "date": {
          "type": "string",
          "example": "2025-06-07"
        },
        "studyMinutes": {
          "type": "number",
          "example": 120
        },
        "pagesBooksRead": {
          "type": "number",
          "example": 45
        },
        "newSkillsPracticed": {
          "type": "array",
          "example": [
            "UI Design",
            "Git"
          ],
          "items": {
            "type": "string"
          }
        },
        "mentalState": {
          "type": "string",
          "example": "Focused"
        },
        "notes": {
          "type": "string",
          "example": "Learned new CSS tricks"
        },
        "motivationLevel": {
          "type": "number",
          "example": 8
        },
        "distractionsCount": {
          "type": "number",
          "example": 2
        }
      }
    }
  },
  "externalDocs": {
    "description": "GitHub Repository",
    "url": "https://github.com/GreiceMoreira/cse341-gm/tree/main/project3-wellness"
  }
}